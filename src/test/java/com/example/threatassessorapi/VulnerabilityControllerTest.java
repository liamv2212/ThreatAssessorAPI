package com.example.threatassessorapi;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.junit.Test;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class VulnerabilityControllerTest {

    @Test
    public void testGetAllVulnerabilities_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetAllVulnerabilities_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetAllVulnerabilities_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetAllVulnerabilities_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetAllVulnerabilities_with_OrgID_StartDate_EndDate_And_OS() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }
    @Test
    public void testGetAllVulnerabilities_with_OrgID_StartDate_EndDate_OS_And_ResourceType() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux&resource_type=cloud"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetAllVulnerabilities_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetAllVulnerabilities_invalid_OS() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?OS=l1nux&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetAllVulnerabilities_invalid_resource_type() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/?resource_type=c1ous&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetVulnerabilitiesForSingleResource_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetVulnerabilitiesForSingleResource_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/1?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetVulnerabilitiesForSingleResource_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/1?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetVulnerabilitiesForSingleResource_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<Vulnerability> vulnerabilities = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/1?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            Vulnerability vulnerability = gson.fromJson(resource_vulns, Vulnerability.class);
            vulnerabilities.add(vulnerability);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(vulnerabilities.size(), 0);
    }

    @Test
    public void testGetVulnerabilitiesForSingleResource_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/1?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScore_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScore_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScore_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScore_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScore_with_OrgID_StartDate_EndDate_And_OS() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }
    @Test
    public void testGetRiskScore_with_OrgID_StartDate_EndDate_OS_And_ResourceType() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux&resource_type=cloud"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScore_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScore_invalid_OS() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?OS=l1nux&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScore_invalid_resource_type() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk?resource_type=c1ous&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScoreForIndividualResource_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk/1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testGetRiskScoreForIndividualResource_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk/1?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScoreForIndividualResource_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk/1?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScoreForIndividualResource_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk/1?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testGetRiskScoreForIndividualResource_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/risk/1?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountRemediatedVulns_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountRemediatedVulns_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountRemediatedVulns_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountRemediatedVulns_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountRemediatedVulns_with_OrgID_StartDate_EndDate_And_OS() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }
    @Test
    public void testCountRemediatedVulns_with_OrgID_StartDate_EndDate_OS_And_ResourceType() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux&resource_type=cloud"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountRemediatedVulns_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountRemediatedVulns_invalid_OS() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?OS=l1nux&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountRemediatedVulns_invalid_resource_type() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/remediated?resource_type=c1ous&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountNewlyFoundVulns_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountNewlyFoundVulns_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountNewlyFoundVulns_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountNewlyFoundVulns_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountNewlyFoundVulns_with_OrgID_StartDate_EndDate_And_OS() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }
    @Test
    public void testCountNewlyFoundVulns_with_OrgID_StartDate_EndDate_OS_And_ResourceType() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux&resource_type=cloud"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testCountNewlyFoundVulns_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountNewlyFoundVulns_invalid_OS() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?OS=l1nux&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testCountNewlyFoundVulns_invalid_resource_type() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFoundCount?resource_type=c1ous&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testNewlyFoundVulns_no_OrgID() throws URISyntaxException, IOException, InterruptedException {

        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testNewlyFoundVulns_with_OrgID() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testNewlyFoundVulns_with_OrgID_And_StartDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?start_date=1735232375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testNewlyFoundVulns_with_OrgID_StartDate_And_EndDate() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?start_date=1735232375000&end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testNewlyFoundVulns_with_OrgID_StartDate_EndDate_And_OS() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }
    @Test
    public void testNewlyFoundVulns_with_OrgID_StartDate_EndDate_OS_And_ResourceType() throws URISyntaxException, IOException, InterruptedException {
        ArrayList<DatedInteger> datedIntegers = new ArrayList<>();
        Gson gson = new GsonBuilder().setDateFormat("yyyy-MM-dd").create();
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?start_date=1735232375000&end_date=1735664375000&org_id=1&OS=linux&resource_type=cloud"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        for(String resource_vulns : getResponse.body().replaceAll("[\\[\\]]", "").replaceAll("},\\{", "}+{").split("\\+")){
            DatedInteger datedInteger = gson.fromJson(resource_vulns, DatedInteger.class);
            datedIntegers.add(datedInteger);
        }
        assertEquals(getResponse.statusCode(), 200);
        assertNotEquals(datedIntegers.size(), 0);
    }

    @Test
    public void testNewlyFoundVulns_endDate_no_startDate() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?end_date=1735664375000&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testNewlyFoundVulns_invalid_OS() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?OS=l1nux&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

    @Test
    public void testNewlyFoundVulns_invalid_resource_type() throws URISyntaxException, IOException, InterruptedException {
        HttpRequest getRequest = HttpRequest.newBuilder()
                .uri(new URI("http://localhost:8080/vulnerabilities/newlyFound?resource_type=c1ous&org_id=1"))
                .build();

        HttpClient httpClient = HttpClient.newHttpClient();

        HttpResponse<String> getResponse = httpClient.send(getRequest, HttpResponse.BodyHandlers.ofString());
        assertEquals(getResponse.statusCode(), 400);
    }

}
